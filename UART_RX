module uart_rx(
    input clk,              // system clock
    input reset,            // synchronous reset
    input rx,               // UART serial input
    input s_tick,           // tick from baud generator (16x baud rate)
    output reg rx_done_tick, // signal: 1 clock tick when byte is received
    output [7:0] dout       // received 8-bit data
);

    // Parameters
    parameter DBIT = 8;        // data bits
    parameter SB_TICK = 15;    // stop bit tick count (1 stop bit = 16 ticks)
    parameter idle  = 2'b00,   // FSM states
              start = 2'b01,
              data  = 2'b10,
              stop  = 2'b11;

    // Registers
    reg [1:0] state_reg, state_next;     // FSM current and next states
    reg [3:0] s_reg, s_next;             // tick counter (0-15)
    reg [2:0] n_reg, n_next;             // bit counter (0-7)
    reg [7:0] b_reg, b_next;             // data shift register

    // State Update Block (Sequential)
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state_reg <= idle;
            s_reg <= 0;
            n_reg <= 0;
            b_reg <= 0;
        end else begin
            state_reg <= state_next;
            s_reg <= s_next;
            n_reg <= n_next;
            b_reg <= b_next;
        end
    end

    // FSM and Logic Block (Combinational)
    always @(*) begin
        state_next = state_reg;
        s_next = s_reg;
        n_next = n_reg;
        b_next = b_reg;
        rx_done_tick = 1'b0;

        case (state_reg)
            idle:
                if (~rx) begin // detect start bit
                    state_next = start;
                    s_next = 0;
                end

            start:
                if (s_tick) begin
                    if (s_reg == 7) begin // middle of start bit
                        state_next = data;
                        s_next = 0;
                        n_next = 0;
                    end else
                        s_next = s_reg + 1;
                end

            data:
                if (s_tick) begin
                    if (s_reg == 15) begin // sample point
                        s_next = 0;
                        b_next = {rx, b_reg[7:1]}; // shift in data LSB first
                        if (n_reg == (DBIT - 1))
                            state_next = stop;
                        else
                            n_next = n_reg + 1;
                    end else
                        s_next = s_reg + 1;
                end

            stop:
                if (s_tick) begin
                    if (s_reg == SB_TICK - 1) begin
                        state_next = idle;
                        rx_done_tick = 1'b1; // signal data reception done
                    end else
                        s_next = s_reg + 1;
                end
        endcase
    end

    // Output assignment
    assign dout = b_reg;

endmodule

