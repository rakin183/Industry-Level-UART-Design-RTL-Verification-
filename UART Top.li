module uart
  #(parameter DBIT = 8,                // data bits
    SB_TICK = 16,                      // 16 ticks for 1 stop bit
    FIFO_W = 2                         // address bits of FIFO
   )
   (
    input logic clk, reset,
    input logic rd_uart, wr_uart, rx,
    input logic [7:0] w_data,
    input logic [10:0] dvsr,
    output logic tx_full, rx_empty,
    output logic tx, 
    output logic [7:0] r_data
   );

   // signal declarations
   logic tick, tx_done_tick, tx_start;
   logic rx_done_tick;
   logic [7:0] tx_fifo_out, rx_data_out;
   logic tx_fifo_not_empty;

   // body
   baud_gen baud_gen_unit (.*);
   
   uart_rx #(.DBIT(DBIT), .SB_TICK(SB_TICK)) uart_rx_unit
      (.rx(rx), .clk(clk), .reset(reset), .s_tick(tick), 
       .rx_done_tick(rx_done_tick), .dout(rx_data_out));

   uart_tx #(.DBIT(DBIT), .SB_TICK(SB_TICK)) uart_tx_unit
      (.clk(clk), .reset(reset), .tx_start(tx_start), .s_tick(tick), 
       .din(tx_fifo_out), .tx_done_tick(tx_done_tick), .tx(tx));

   fifo #(.DATA_WIDTH(8), .ADDR_WIDTH(FIFO_W)) fifo_rx_unit
      (.clk(clk), .reset(reset), .rd(rd_uart), .wr(rx_done_tick), 
       .w_data(rx_data_out), .empty(rx_empty), .r_data(r_data));

   fifo #(.DATA_WIDTH(8), .ADDR_WIDTH(FIFO_W)) fifo_tx_unit
      (.clk(clk), .reset(reset), .rd(tx_done_tick), .wr(wr_uart), 
       .w_data(w_data), .full(tx_full), .r_data(tx_fifo_out));

   assign tx_start = ~tx_empty;

endmodule
